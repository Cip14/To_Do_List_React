{"version":3,"sources":["components/ToDoItem.js","components/NewItem.js","components/Header.js","components/Footer.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","state","editMode","handleEdit","bind","text","this","setState","event","target","value","itemData","id","props","item","completed","handleChange","toDoItem","className","type","checked","onChange","editItem","onKeyUp","keyCode","saveEdit","deleteButton","onClick","deleteItem","editButton","startEdit","React","Component","NewItem","itemId","inputValue","buttonVisible","addNew","prevState","newItem","Header","Footer","ToDoList","JSON","parse","localStorage","getItem","clear","setItem","stringify","listData","size","length","newList","map","i","push","splice","listElements","key","blankLines","Array","apply","e","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d6d9c15.chunk.js","sourcesContent":["import React from 'react'\n\nclass ToDoItem extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      editMode: false\n    }\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n\n  startEdit(text) {\n    this.setState({\n      editMode: true,\n      text: text\n    })\n  }\n\n  handleEdit(event) {\n    this.setState({\n      editMode: true,\n      text: event.target.value\n    })\n  }\n\n  saveEdit() {\n    const itemData = {\n      id: this.props.item.id,\n      text: this.state.text,\n      completed: this.props.item.completed\n    };\n    this.setState({\n      editMode: false\n    })\n    this.props.handleChange(itemData)\n  }\n\n  render() {\n    const itemData = {\n      id: this.props.item.id,\n      text: this.props.item.text,\n      completed: !this.props.item.completed\n    };\n\n    const toDoItem =\n    <label\n      className={this.props.item.completed ? 'completedItem' : null}\n      >\n      <input className=\"ToDoItemCheckbox\"\n        type=\"checkbox\"\n        checked={this.props.item.completed}\n        onChange={() => {this.props.handleChange(itemData)}}\n        />\n      {this.props.item.text}\n    </label>\n\n    const editItem =\n    <div className=\"EditItemDiv\">\n      <input type=\"checkbox\" checked={false} onChange={()=>{}}/>\n      <input className=\"EditItemInput\"\n        type=\"text\"\n        value={this.state.text}\n        onChange={this.handleEdit}\n        onKeyUp={event => {\n          if (event.keyCode === 13) {\n            this.saveEdit();\n          }\n        }}\n        />\n    </div>\n\n    const deleteButton =\n    <button className=\"DeleteItemButton\"\n      onClick={() => {this.props.deleteItem(this.props.item)}}>\n      X\n    </button>\n\n    const editButton = this.state.editMode ?\n    <button className=\"SaveItemButton\"\n      onClick={() => {this.saveEdit()}}>\n      s\n    </button>\n    :\n    <button className=\"EditItemButton\"\n      onClick={() => {this.startEdit(this.props.item.text)}}>\n      /\n    </button>\n\n\n    return(\n      <div className=\"ToDoItem\">\n        {this.state.editMode ? editItem : toDoItem}\n        {this.props.item.completed ? deleteButton : editButton}\n      </div>\n    )\n  }\n}\n\nexport default ToDoItem;\n","import React from 'react'\n\nclass NewItem extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      itemData: [{\n        id: props.itemId,\n        text: \"\",\n        completed: false\n      }],\n      inputValue: \"\",\n      buttonVisible: false\n    }\n    this.addNew = this.addNew.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event){\n    this.setState({\n      itemData: {\n        id: this.props.itemId,\n        text: event.target.value,\n        completed: false\n      },\n      inputValue: event.target.value,\n      buttonVisible: (event.target.value !== \"\")\n    })\n  }\n\n  addNew(){\n    this.setState(prevState => {\n      return {\n        itemData: {\n          id: prevState.itemData.id + 1,\n          text: \"\",\n          completed: prevState.itemData.completed\n        },\n        inputValue: \"\",\n        buttonVisible: false\n      }\n    })\n    this.props.newItem(this.state.itemData);\n  }\n\n  render() {\n    return(\n      <div className=\"NewItem\">\n        <input type=\"checkbox\" checked={false} onChange={()=>{}}/>\n        <input className=\"NewItemInput\"\n          type=\"text\"\n          value={this.state.inputValue}\n          onChange={this.handleChange}\n          onKeyUp={event => {\n            if (event.keyCode === 13 && event.target.value !== \"\") {\n              this.addNew();\n            }\n          }}\n        />\n        {this.state.buttonVisible && <button\n          className=\"NewItemButton\"\n          onClick={this.addNew}>+</button>}\n      </div>\n    )\n  }\n}\n\nexport default NewItem;\n","import React from 'react'\n\nfunction Header() {\n  return(\n    <header>\n      <h2>Minha Lista de tarefas</h2>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction Footer() {\n  return(\n    <footer>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport ToDoItem from './ToDoItem'\nimport NewItem from './NewItem'\nimport Header from './Header'\nimport Footer from './Footer'\n\nclass ToDoList extends React.Component{\n  constructor() {\n    super();\n    if (JSON.parse(localStorage.getItem('list')) === null) {\n      localStorage.clear();\n      const ld = [{\n        id: 0,\n        text: 'Escrever minha primeira tarefa',\n        completed: false\n      }];\n      localStorage.setItem('list', JSON.stringify(ld));\n    }\n    this.state = {\n      listData: JSON.parse(localStorage.getItem('list')),\n      size: JSON.parse(localStorage.getItem('list')).length\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.newItem = this.newItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  handleChange(itemData){\n    const newList = this.state.listData.map((item, i) => {\n      if (item.id === itemData.id) {\n        return{\n          id: i,\n          text: itemData.text,\n          completed: itemData.completed\n        }\n      }else {\n        return{\n          id: i,\n          text: item.text,\n          completed: item.completed\n        }\n      }\n    })\n    this.setState(prevState => {\n      return{\n        listData: newList,\n        size: prevState.size\n      }\n    })\n    localStorage.setItem('list', JSON.stringify(newList));\n  }\n\n  newItem(itemData) {\n    let newList = this.state.listData;\n    newList.push(itemData);\n    this.setState(prevState => {\n      return{\n        listData: newList,\n        size: prevState.size + 1\n      }\n    })\n    localStorage.setItem('list', JSON.stringify(newList));\n  }\n\n  deleteItem(itemData) {\n    let newList = this.state.listData;\n    newList.splice(itemData.id, 1);\n    this.setState(prevState => {\n      return{\n        listData: newList,\n        size: prevState.size\n      }\n    })\n    localStorage.setItem('list', JSON.stringify(newList));\n  }\n\n  render() {\n    const listElements = this.state.listData.map(item => {\n      return (\n        <div>\n        <ToDoItem\n          key={item.id}\n          item={item}\n          handleChange={this.handleChange}\n          deleteItem={this.deleteItem}\n          />\n        <hr/>\n        </div>\n      )\n    })\n\n    const blankLines = Array.apply(null, {length: 19 - this.state.size}).map((e, i) => {\n      return <div>\n      <NewItem\n        key={i}\n        itemId={this.state.size}\n        newItem={this.newItem}\n        />\n      <hr/>\n      </div>\n    });\n\n    return (\n      <div className=\"ToDoList\">\n        <Header />\n        {listElements}\n        {blankLines}\n        <NewItem\n          itemId={this.state.size}\n          newItem={this.newItem}\n          />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default ToDoList;\n","import React from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}